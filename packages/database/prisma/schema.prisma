generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id        String        @id @default(uuid())
  vin       String        @unique
  make      String
  model     String
  year      Int
  type      VehicleType
  color     String?
  plate     String?
  mileage   Int?
  status    VehicleStatus @default(ACTIVE)
  ownerID   String?       @map("owner_id")
  createdAt DateTime?     @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")
  
  // 관계
  owner     User?        @relation(fields: [ownerID], references: [id], onDelete: SetNull)
  maintenanceRecords MaintenanceRecord[]
  telemetries Telemetry[]
  vehicleDocuments VehicleDocument[]
  
  @@map("vehicles")
}

enum VehicleType {
  SEDAN
  SUV
  TRUCK
  VAN
  ELECTRIC
  HYBRID
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  RESERVED
  INACTIVE
  RECALLED
}

/// Maintenance 관련 타입 추가
enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model MaintenanceRecord {
  id           String             @id @default(uuid())
  vehicle      Vehicle            @relation(fields: [vehicleID], references: [id], onDelete: Cascade)
  vehicleID    String             @map("vehicle_id")
  description  String
  date         DateTime
  mileage      Int?
  cost         Float?
  performedBy  String?            @map("performed_by")
  status       MaintenanceStatus  @default(SCHEDULED)
  notes        String?            @map("notes")
  parts        MaintenancePart[]
  documents    MaintenanceDocument[]
  genericDocuments Document[] @relation("MaintenanceRecordDocuments")
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  @@map("maintenance_records")
}

model MaintenancePart {
  id            String             @id @default(uuid())
  maintenance   MaintenanceRecord  @relation(fields: [maintenanceID], references: [id], onDelete: Cascade)
  maintenanceID String             @map("maintenance_id")
  name          String
  partNumber    String?            @map("part_number")
  quantity      Int
  unitCost      Float?             @map("unit_cost")
  totalCost     Float?             @map("total_cost")
  @@map("maintenance_parts")
}

model MaintenanceDocument {
  id            String             @id @default(uuid())
  maintenance   MaintenanceRecord  @relation(fields: [maintenanceID], references: [id], onDelete: Cascade)
  maintenanceID String             @map("maintenance_id")
  url           String
  name          String?
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  @@map("maintenance_documents")
}

/// 사용자 역할 enum 추가
enum UserRole {
  ADMIN
  MANAGER
  USER
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  passwordHash String    @map("password_hash")
  role         UserRole? @default(USER) @map("role")
  isActive     Boolean?  @default(true) @map("is_active")
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  
  // 관계
  vehicles     Vehicle[]
  profile      UserProfile?    @relation("UserProfileRelation")
  notifications Notification[]
  todos        Todo[]
  mobileDevices MobileDevice[]
  securityAuditLogs SecurityAuditLog[]
  predictions  Prediction[]
  todoTemplates TodoTemplate[]  @relation("UserTodoTemplates")
  
  @@map("users")
}

model UserProfile {
  id        String   @id @default(uuid())
  user      User     @relation("UserProfileRelation", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")
  phone     String?
  address   String?
  company   String?
  avatarURL String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("user_profiles")
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  @@map("notifications")
}

model TodoTemplate {
  id        String           @id @default(uuid())
  user      User             @relation("UserTodoTemplates", fields: [userId], references: [id], onDelete: Cascade)
  userId    String           @map("user_id")
  title     String
  items     TodoTemplateItem[]
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  @@map("todo_templates")
}

model TodoTemplateItem {
  id         String        @id @default(uuid())
  template   TodoTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String        @map("template_id")
  content    String
  createdAt  DateTime      @default(now()) @map("created_at")
  @@map("todo_template_items")
}

model Todo {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  title     String
  completed Boolean  @default(false)
  dueDate   DateTime? @map("due_date")
  createdAt DateTime @default(now()) @map("created_at")
  @@map("todos")
}

model Prediction {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  data        Json
  predictedAt DateTime @default(now()) @map("predicted_at")
  @@map("predictions")
}

model MobileDevice {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
  deviceToken  String   @map("device_token")
  platform     String
  createdAt    DateTime @default(now()) @map("created_at")
  @@map("mobile_devices")
}

model SecurityAuditLog {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?  @map("user_id")
  action    String
  timestamp DateTime @default(now())
  details   Json?
  @@map("security_audit_logs")
}

model Telemetry {
  id         String             @id @default(uuid())
  vehicle    Vehicle            @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId  String             @map("vehicle_id")
  data       Json
  timestamp  DateTime           @default(now())
  histories  TelemetryHistory[]
  @@map("telemetries")
}

model TelemetryHistory {
  id           String    @id @default(uuid())
  telemetry    Telemetry @relation(fields: [telemetryId], references: [id], onDelete: Cascade)
  telemetryId  String    @map("telemetry_id")
  data         Json
  recordedAt   DateTime  @default(now()) @map("recorded_at")
  @@map("telemetry_histories")
}

model VehicleDocument {
  id         String   @id @default(uuid())
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId  String   @map("vehicle_id")
  url        String
  description String?
  createdAt  DateTime @default(now()) @map("created_at")
  @@map("vehicle_documents")
}

model Document {
  id            String             @id @default(uuid())
  maintenance   MaintenanceRecord? @relation("MaintenanceRecordDocuments", fields: [maintenanceID], references: [id], onDelete: Cascade)
  maintenanceID String?            @map("maintenance_id")
  url           String
  name          String?
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  @@map("documents")
}

model AdminSettings {
  id              String   @id @default(uuid())
  key             String   @unique
  value           String
  description     String?
  lastModifiedBy  String?  @map("last_modified_by")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("admin_settings")
}

model AdminAuditLog {
  id          String    @id @default(uuid())
  userId      String?   @map("user_id")
  action      String
  resource    String
  resourceId  String?   @map("resource_id")
  details     Json?
  ip          String?
  userAgent   String?   @map("user_agent")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  @@map("admin_audit_logs")
}

model SystemMetrics {
  id          String    @id @default(uuid())
  metric      String
  value       Float
  unit        String?
  timestamp   DateTime  @default(now())
  
  @@map("system_metrics")
}

model BackupLog {
  id          String    @id @default(uuid())
  filename    String
  size        Int
  status      String
  startedAt   DateTime  @map("started_at")
  completedAt DateTime? @map("completed_at")
  errorMsg    String?   @map("error_msg")
  
  @@map("backup_logs")
}

model UserLoginHistory {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  ip          String?
  userAgent   String?   @map("user_agent")
  success     Boolean   @default(true)
  failReason  String?   @map("fail_reason")
  timestamp   DateTime  @default(now())
  
  @@map("user_login_history")
}

model AdminDashboardWidget {
  id          String    @id @default(uuid())
  name        String
  type        String
  config      Json
  position    Int
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  @@map("admin_dashboard_widgets")
}
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { PlusOutlined } from '@ant-design/icons';
import { Drawer, Input, Button, List, Space, Typography, Form, Select, Divider } from 'antd';
// 템플릿 항목 폼 컴포넌트
const TemplateItemForm = ({ item, index, onChange, onRemove }) => (_jsx(List.Item, { className: "border p-2 rounded mb-2", actions: [
        _jsx(Button, { type: "text", danger: true, onClick: () => onRemove(index), children: "\uC0AD\uC81C" }, "delete")
    ], children: _jsxs("div", { className: "w-full", children: [_jsx(Input, { value: item.title, onChange: e => onChange(index, 'title', e.target.value), placeholder: "\uC791\uC5C5 \uD56D\uBAA9 \uC81C\uBAA9", className: "mb-2" }), _jsxs("div", { className: "flex gap-2", children: [_jsxs(Select, { value: item.priority || 'medium', onChange: value => onChange(index, 'priority', value), style: { width: 120 }, children: [_jsx(Select.Option, { value: "low", children: "\uB0AE\uC74C" }), _jsx(Select.Option, { value: "medium", children: "\uC911\uAC04" }), _jsx(Select.Option, { value: "high", children: "\uB192\uC74C" })] }), _jsx(Input, { value: item.description || '', onChange: e => onChange(index, 'description', e.target.value), placeholder: "\uC124\uBA85 (\uC120\uD0DD\uC0AC\uD56D)", style: { flex: 1 } })] })] }) }));
// 템플릿 목록 아이템 컴포넌트
const TemplateListItem = ({ template, onSelect, onEdit, onDelete }) => (_jsx(List.Item, { className: "border p-3 rounded mb-2", actions: [
        _jsx(Button, { type: "text", onClick: () => onEdit(template), children: "\uD3B8\uC9D1" }, "edit"),
        _jsx(Button, { type: "text", danger: true, onClick: () => onDelete(template.id), children: "\uC0AD\uC81C" }, "delete")
    ], children: _jsxs("div", { className: "cursor-pointer", onClick: () => onSelect(template), children: [_jsx("div", { className: "font-semibold", children: template.name }), _jsx("div", { className: "text-xs text-gray-500", children: template.description }), _jsxs("div", { className: "mt-1", children: [_jsx("span", { className: "text-xs bg-blue-100 text-blue-800 rounded px-2 py-1", children: template.category }), _jsxs("span", { className: "text-xs text-gray-500 ml-2", children: [template.items.length, "\uAC1C \uC791\uC5C5"] })] })] }) }));
export const TemplateManageDrawer = ({ visible, templateState, onClose, onCancelEdit, onSaveEdit, onItemChange, onRemoveItem, onAddItem, onAddTemplate, onTemplateSelect, onEditTemplate, onDeleteTemplate, templateSearch, setTemplateSearch, categories, filteredTemplates }) => {
    return (_jsxs(Drawer, { title: templateState.editingTemplate ? '템플릿 편집' : '템플릿 관리', placement: "right", onClose: () => {
            onClose();
            if (templateState.editingTemplate) {
                onCancelEdit();
            }
        }, open: visible, width: 600, extra: templateState.editingTemplate ? (_jsxs(Space, { children: [_jsx(Button, { onClick: onCancelEdit, children: "\uCDE8\uC18C" }), _jsx(Button, { onClick: onSaveEdit, type: "primary", children: "\uC800\uC7A5" })] })) : null, children: [_jsx(Typography.Title, { level: 4, children: templateState.editingTemplate ? '템플릿 수정' : '새 템플릿 추가' }), _jsxs(Form, { layout: "vertical", children: [_jsx(Form.Item, { label: "\uD15C\uD50C\uB9BF \uC774\uB984", required: true, children: _jsx(Input, { value: templateState.templateForm.name, onChange: e => onItemChange(-1, 'name', e.target.value), placeholder: "\uD15C\uD50C\uB9BF \uC774\uB984\uC744 \uC785\uB825\uD558\uC138\uC694" }) }), _jsx(Form.Item, { label: "\uC124\uBA85", children: _jsx(Input.TextArea, { value: templateState.templateForm.description, onChange: e => onItemChange(-1, 'description', e.target.value), placeholder: "\uD15C\uD50C\uB9BF\uC5D0 \uB300\uD55C \uC124\uBA85\uC744 \uC785\uB825\uD558\uC138\uC694", rows: 2 }) }), _jsx(Form.Item, { label: "\uCE74\uD14C\uACE0\uB9AC", children: _jsx(Select, { value: templateState.templateForm.category, onChange: value => onItemChange(-1, 'category', value), style: { width: '100%' }, children: categories.map(category => (_jsx(Select.Option, { value: category, children: category }, category))) }) }), _jsxs(Form.Item, { label: "\uD56D\uBAA9", children: [_jsx(List, { dataSource: templateState.templateForm.items, renderItem: (item, index) => (_jsx(TemplateItemForm, { item: item, index: index, onChange: onItemChange, onRemove: onRemoveItem })), locale: { emptyText: '항목이 없습니다. 항목을 추가해주세요.' } }), _jsx(Button, { onClick: onAddItem, type: "dashed", block: true, icon: _jsx(PlusOutlined, {}), children: "\uD56D\uBAA9 \uCD94\uAC00" })] }), !templateState.editingTemplate && (_jsx(Form.Item, { children: _jsx(Button, { type: "primary", onClick: onAddTemplate, block: true, children: "\uD15C\uD50C\uB9BF \uC800\uC7A5" }) }))] }), !templateState.editingTemplate && (_jsxs(_Fragment, { children: [_jsx(Divider, {}), _jsx(Typography.Title, { level: 4, children: "\uAE30\uC874 \uD15C\uD50C\uB9BF" }), _jsx("div", { className: "mb-4", children: _jsx(Input.Search, { placeholder: "\uD15C\uD50C\uB9BF \uAC80\uC0C9", onChange: e => setTemplateSearch(e.target.value), value: templateSearch }) }), _jsx(List, { dataSource: filteredTemplates, renderItem: template => (_jsx(TemplateListItem, { template: template, onSelect: onTemplateSelect, onEdit: onEditTemplate, onDelete: onDeleteTemplate })), locale: { emptyText: '템플릿이 없습니다.' } })] }))] }));
};
export default TemplateManageDrawer;

# 멀티 스테이지 빌드를 사용한 최적화된 Dockerfile
# 빌드 스테이지
FROM node:23-alpine AS builder

WORKDIR /app

# 캐싱을 위한 package.json 및 package-lock.json 파일 복사
COPY package.json package-lock.json tsconfig.json ./
COPY packages/shared/package.json ./packages/shared/
COPY packages/frontend/package.json ./packages/frontend/

# 공통 패키지 설치 (legacy-peer-deps 옵션 사용)
RUN npm install --legacy-peer-deps

# 소스 코드 복사
COPY packages/shared ./packages/shared/
COPY packages/frontend ./packages/frontend/
COPY tsconfig*.json ./
COPY babel.config.js ./

# shared 패키지 빌드를 위한 Babel 설정 및 빌드 스크립트 준비
WORKDIR /app/packages/shared
COPY packages/shared/.babelrc ./
COPY packages/shared/tsconfig.json ./
COPY packages/shared/tsconfig.docker.frontend.json ./
COPY packages/shared/docker-build-frontend.sh ./
RUN chmod +x ./docker-build-frontend.sh && npm run build:docker:frontend

# 프론트엔드 빌드
WORKDIR /app/packages/frontend
# 번역 파일 생성 스크립트 복사 및 실행
COPY packages/frontend/create-translations.sh ./
RUN chmod +x ./create-translations.sh && ./create-translations.sh
# 프론트엔드 빌드 실행
RUN npm run build

# 실행 스테이지
FROM nginx:alpine AS runtime

# Nginx 설정
COPY docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# 정적 파일 복사
COPY --from=builder /app/packages/frontend/build /usr/share/nginx/html

# 환경 변수 처리를 위한 스크립트 복사
COPY docker/nginx/env.sh /docker-entrypoint.d/40-env.sh
RUN chmod +x /docker-entrypoint.d/40-env.sh

# 실행 사용자 설정 (보안 강화)
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget -q --spider http://localhost:80/ || exit 1

# 포트 노출
EXPOSE 80

# Nginx는 기본 CMD가 있으므로 별도 지정 안함

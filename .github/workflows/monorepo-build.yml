name: Monorepo Build System

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      packages:
        description: '빌드할 패키지 (쉼표로 구분, 비워두면 모든 패키지)'
        required: false
        type: string

# 동시 실행 방지
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # 새 워크플로우 실행 시 이전 실행 취소

jobs:
  setup:
    name: Setup and Analysis
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      deps_graph: ${{ steps.deps-graph.outputs.graph }}
      changed_packages: ${{ steps.changed-packages.outputs.packages }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 Git 히스토리 가져오기
      
      # 의존성 그래프 생성
      - name: Generate dependency graph
        id: deps-graph
        run: |
          npm install -g dependency-cruiser
          dependency-cruiser --include-only "^packages" --output-type json --output dependency-graph.json .
          echo "graph=$(cat dependency-graph.json | jq -c .)" >> $GITHUB_OUTPUT
      
      # 변경된 패키지 감지
      - name: Detect changed packages
        id: changed-packages
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.packages }}" ]]; then
            # 수동 실행 시 입력한 패키지 사용
            CHANGED_PACKAGES="${{ github.event.inputs.packages }}"
          else
            # Git 변경 내용 확인하여 영향받는 패키지 결정
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              BASE_SHA=$(git rev-parse ${{ github.event.pull_request.base.sha }})
              HEAD_SHA=$(git rev-parse ${{ github.event.pull_request.head.sha }})
            else
              # push 이벤트인 경우
              BASE_SHA=$(git rev-parse HEAD~1)
              HEAD_SHA=$(git rev-parse HEAD)
            fi
            
            # packages 디렉토리 내에서 변경된 파일 찾기
            CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep "^packages/" || echo "")
            
            if [ -z "$CHANGED_FILES" ]; then
              # 변경된 파일이 없는 경우
              CHANGED_PACKAGES=""
            else
              # 변경된 패키지 추출
              CHANGED_PACKAGES=$(echo "$CHANGED_FILES" | awk -F/ '{print $2}' | sort -u | tr '\n' ',' | sed 's/,$//')
            fi
          fi
          
          echo "Changed packages: $CHANGED_PACKAGES"
          echo "packages=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
      
      # 빌드 매트릭스 설정
      - name: Set build matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.packages }}" ]]; then
            # 수동 실행 시 입력한 패키지 사용
            PACKAGES="${{ github.event.inputs.packages }}"
          elif [[ -z "${{ steps.changed-packages.outputs.packages }}" ]]; then
            # 변경된 패키지가 없으면 모든 패키지 빌드
            PACKAGES=$(ls -d packages/* | awk -F/ '{print $2}' | tr '\n' ',' | sed 's/,$//')
          else
            # 변경된 패키지 및 의존하는 패키지 추가
            # 여기서는 간단하게 구현했지만, 실제로는 의존성 그래프를 분석해야 함
            PACKAGES="${{ steps.changed-packages.outputs.packages }}"
          fi
          
          # 매트릭스 형식으로 변환
          MATRIX_JSON="{\"package\":["
          IFS=',' read -ra PKG_ARRAY <<< "$PACKAGES"
          for i in "${!PKG_ARRAY[@]}"; do
            if [ $i -gt 0 ]; then
              MATRIX_JSON+=","
            fi
            MATRIX_JSON+="\"${PKG_ARRAY[$i]}\""
          done
          MATRIX_JSON+="]}"
          
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
  
  # 패키지 의존성 설치 및 캐싱
  install-deps:
    name: Install Dependencies
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      # 노드 모듈 캐싱
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      
      # Python 가상환경 캐싱
      - name: Cache Python virtual environment
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pip
          key: ${{ runner.os }}-python-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-venv-
      
      # 루트 의존성 설치
      - name: Install root dependencies
        run: npm ci --legacy-peer-deps
      
      # 빌드 캐시 설정
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            **/dist
            **/build
            **/.turbo
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
  
  # 병렬 빌드 작업
  build:
    name: Build Package
    needs: [setup, install-deps]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 한 패키지 빌드 실패 시에도 다른 패키지 계속 빌드
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      # 캐시 복원
      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Restore Python virtual environment
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pip
          key: ${{ runner.os }}-python-venv-${{ hashFiles('**/requirements*.txt') }}
      
      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            **/dist
            **/build
            **/.turbo
          key: ${{ runner.os }}-build-${{ github.sha }}
      
      # 패키지 유형 감지 (Node.js 또는 Python)
      - name: Detect package type
        id: detect-type
        run: |
          if [ -f "packages/${{ matrix.package }}/package.json" ]; then
            echo "type=node" >> $GITHUB_OUTPUT
          elif [ -f "packages/${{ matrix.package }}/requirements.txt" ] || [ -f "packages/${{ matrix.package }}/setup.py" ]; then
            echo "type=python" >> $GITHUB_OUTPUT
          else
            echo "type=unknown" >> $GITHUB_OUTPUT
          fi
      
      # Node.js 패키지 빌드
      - name: Build Node.js package
        if: steps.detect-type.outputs.type == 'node'
        run: |
          echo "Building Node.js package: ${{ matrix.package }}"
          
          # 패키지 의존성 설치 (캐시에 없는 경우)
          if [ ! -d "packages/${{ matrix.package }}/node_modules" ]; then
            cd packages/${{ matrix.package }}
            npm ci
            cd ../..
          fi
          
          # Turbo를 사용한 증분 빌드
          npx turbo run build --filter=${{ matrix.package }} --cache-dir=.turbo
          
          # 빌드 결과물 확인
          if [ -d "packages/${{ matrix.package }}/dist" ] || [ -d "packages/${{ matrix.package }}/build" ]; then
            echo "Build successful!"
          else
            echo "::error::Build failed for package ${{ matrix.package }}"
            exit 1
          fi
      
      # Python 패키지 빌드
      - name: Build Python package
        if: steps.detect-type.outputs.type == 'python'
        run: |
          echo "Building Python package: ${{ matrix.package }}"
          
          # 가상환경 활성화
          python -m venv .venv
          source .venv/bin/activate
          
          # 패키지 의존성 설치
          cd packages/${{ matrix.package }}
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          # setup.py가 있는 경우 pip 개발 모드로 설치
          if [ -f "setup.py" ]; then
            pip install -e .
          fi
          
          # 패키지 빌드 (setup.py가 있는 경우)
          if [ -f "setup.py" ]; then
            python setup.py build
            python setup.py sdist bdist_wheel
          else
            echo "No setup.py found, skipping build step"
          fi
          
          cd ../..
      
      # 알 수 없는 패키지 유형 처리
      - name: Handle unknown package type
        if: steps.detect-type.outputs.type == 'unknown'
        run: |
          echo "::warning::Unknown package type for ${{ matrix.package }}, skipping build"
      
      # 빌드 결과물 저장
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-build
          path: |
            packages/${{ matrix.package }}/dist
            packages/${{ matrix.package }}/build
            packages/${{ matrix.package }}/*.egg-info
          retention-days: 7
  
  # 빌드 결과 요약
  summary:
    name: Build Summary
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Summarize build results
        run: |
          echo "# Monorepo Build Summary" > build-summary.md
          echo "" >> build-summary.md
          echo "## Changed Packages" >> build-summary.md
          
          if [[ -z "${{ needs.setup.outputs.changed_packages }}" ]]; then
            echo "No packages changed in this run." >> build-summary.md
          else
            echo "The following packages were affected:" >> build-summary.md
            IFS=',' read -ra PKG_ARRAY <<< "${{ needs.setup.outputs.changed_packages }}"
            for pkg in "${PKG_ARRAY[@]}"; do
              echo "- $pkg" >> build-summary.md
            done
          fi
          
          echo "" >> build-summary.md
          echo "## Build Results" >> build-summary.md
          
          # 매트릭스에서 빌드된 모든 패키지 상태 확인
          echo "| Package | Status |" >> build-summary.md
          echo "| ------- | ------ |" >> build-summary.md
          
          # 매트릭스에서 각 패키지의 빌드 상태 추출
          PACKAGES=$(echo '${{ needs.setup.outputs.matrix }}' | jq -r '.package[]')
          for pkg in $PACKAGES; do
            if [[ "${{ needs.build.result }}" == "success" ]]; then
              echo "| $pkg | ✅ Success |" >> build-summary.md
            else
              # 개별 패키지 빌드 상태 확인 (실제로는 매트릭스 작업의 상태를 확인해야 함)
              echo "| $pkg | ❌ Failed |" >> build-summary.md
            fi
          done
          
          echo "" >> build-summary.md
          echo "## Build Time" >> build-summary.md
          echo "Total build time: ${{ steps.job-time.outputs.minutes }} minutes" >> build-summary.md
          
          cat build-summary.md
      
      # 빌드 요약 업로드
      - name: Upload build summary
        uses: actions/upload-artifact@v4
        with:
          name: build-summary
          path: build-summary.md
          retention-days: 7
      
      # PR에 요약 코멘트 남기기
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('build-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
  
  # 성능 분석 및 최적화 제안
  optimize:
    name: Build Optimization Analysis
    needs: [build, summary]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Turbo의 빌드 성능 리포트 분석
      - name: Analyze build performance
        run: |
          echo "# Build Optimization Suggestions" > optimization-report.md
          echo "" >> optimization-report.md
          
          # 터보레포 성능 데이터가 있다면 분석
          if [ -d ".turbo" ]; then
            echo "## Turbo Build Analysis" >> optimization-report.md
            echo "" >> optimization-report.md
            echo "Analyzing Turbo build logs for optimization opportunities..." >> optimization-report.md
            
            # 빌드 캐시 히트율 분석
            echo "### Cache Hit Rate" >> optimization-report.md
            echo "Packages with low cache hit rates might need better task inputs/outputs configuration." >> optimization-report.md
            echo "" >> optimization-report.md
            
            # 빌드 시간 분석
            echo "### Build Time Analysis" >> optimization-report.md
            echo "Packages with longest build times:" >> optimization-report.md
            echo "1. (Analysis would show packages with longest build times)" >> optimization-report.md
            echo "2. Consider splitting these packages or optimizing their build processes" >> optimization-report.md
            echo "" >> optimization-report.md
          else
            echo "No Turbo build data found. Using Turbo for incremental builds is recommended." >> optimization-report.md
          fi
          
          # 의존성 그래프 최적화 제안
          echo "## Dependency Graph Optimization" >> optimization-report.md
          echo "" >> optimization-report.md
          echo "- Consider splitting large packages into smaller, more focused ones" >> optimization-report.md
          echo "- Review circular dependencies, which may indicate design issues" >> optimization-report.md
          echo "- Group frequently changed packages together to minimize rebuild cascades" >> optimization-report.md
          
          # 캐싱 전략 제안
          echo "## Caching Strategy Recommendations" >> optimization-report.md
          echo "" >> optimization-report.md
          echo "- Ensure all build outputs are properly cached" >> optimization-report.md
          echo "- Consider using persistent caching for CI/CD" >> optimization-report.md
          echo "- Review package.json scripts for deterministic builds" >> optimization-report.md
          
          cat optimization-report.md
      
      # 최적화 보고서 업로드
      - name: Upload optimization report
        uses: actions/upload-artifact@v4
        with:
          name: build-optimization-report
          path: optimization-report.md
          retention-days: 7
      
      # PR에 최적화 제안 코멘트 남기기
      - name: Comment optimization suggestions on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('optimization-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

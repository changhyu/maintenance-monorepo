name: Deploy Automation

on:
  push:
    branches: [main, develop, release/*]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      version:
        description: '배포 버전 (기본값은 latest)'
        required: false
        default: 'latest'
      rollback:
        description: '롤백 수행 여부'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate:
    name: 배포 검증
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    
    steps:
      - name: 브랜치/태그 기반 환경 설정
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/heads/release/.* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: 버전 설정
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "latest" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      - name: 배포 환경 및 버전 출력
        run: |
          echo "🚀 배포 환경: ${{ steps.set-env.outputs.environment }}"
          echo "📦 배포 버전: ${{ steps.set-version.outputs.version }}"

  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.rollback != 'true'
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
      
      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Python 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Node.js 의존성 설치
        run: |
          npm ci
      
      - name: Python 테스트 실행
        run: |
          pytest backend/tests/
      
      - name: Frontend 테스트 실행
        run: |
          npm test

  build:
    name: 이미지 빌드
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && (needs.test.result == 'success' || github.event.inputs.rollback == 'true')
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
      
      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v2
      
      - name: Docker 로그인
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 타임스탬프 생성
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      
      - name: 환경 변수 설정
        run: |
          chmod +x scripts/setup_env.sh
          ./scripts/setup_env.sh ${{ needs.validate.outputs.environment }}
      
      - name: API 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/maintenance-api:${{ needs.validate.outputs.version }}
            ${{ secrets.DOCKER_REGISTRY }}/maintenance-api:${{ needs.validate.outputs.version }}-${{ steps.timestamp.outputs.timestamp }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/maintenance-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/maintenance-api:buildcache,mode=max
      
      - name: Frontend 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/maintenance-frontend:${{ needs.validate.outputs.version }}
            ${{ secrets.DOCKER_REGISTRY }}/maintenance-frontend:${{ needs.validate.outputs.version }}-${{ steps.timestamp.outputs.timestamp }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/maintenance-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/maintenance-frontend:buildcache,mode=max

  deploy-dev:
    name: 개발 환경 배포
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always() && needs.build.result == 'success' && needs.validate.outputs.environment == 'dev'
    
    steps:
      - name: SSH로 서버 연결 및 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/maintenance-monorepo
            git pull
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh dev ${{ needs.validate.outputs.version }}

  deploy-staging:
    name: 스테이징 환경 배포
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always() && needs.build.result == 'success' && needs.validate.outputs.environment == 'staging'
    
    steps:
      - name: SSH로 서버 연결 및 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_SERVER_HOST }}
          username: ${{ secrets.STAGING_SERVER_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/maintenance-monorepo
            git pull
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh staging ${{ needs.validate.outputs.version }}

  deploy-prod:
    name: 프로덕션 환경 배포
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always() && needs.build.result == 'success' && needs.validate.outputs.environment == 'prod'
    environment: production # 승인 요구를 위한 environment 설정
    
    steps:
      - name: SSH로 서버 연결 및 배포 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/maintenance-monorepo
            git pull
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh prod ${{ needs.validate.outputs.version }}

  rollback:
    name: 롤백 실행
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.rollback == 'true'
    
    steps:
      - name: 환경에 따른 롤백 설정
        id: rollback-config
        run: |
          if [[ "${{ needs.validate.outputs.environment }}" == "prod" ]]; then
            echo "host=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.PROD_SERVER_USER }}" >> $GITHUB_OUTPUT
            echo "key=${{ secrets.PROD_SSH_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.validate.outputs.environment }}" == "staging" ]]; then
            echo "host=${{ secrets.STAGING_SERVER_HOST }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.STAGING_SERVER_USER }}" >> $GITHUB_OUTPUT
            echo "key=${{ secrets.STAGING_SSH_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
          else
            echo "host=${{ secrets.DEV_SERVER_HOST }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.DEV_SERVER_USER }}" >> $GITHUB_OUTPUT
            echo "key=${{ secrets.DEV_SSH_PRIVATE_KEY }}" >> $GITHUB_OUTPUT
          fi
      
      - name: SSH로 서버 연결 및 롤백 실행
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.rollback-config.outputs.host }}
          username: ${{ steps.rollback-config.outputs.user }}
          key: ${{ steps.rollback-config.outputs.key }}
          script: |
            cd /opt/maintenance-monorepo
            ./scripts/rollback.sh ${{ needs.validate.outputs.environment }} ${{ needs.validate.outputs.version }}

  notify:
    name: 배포 결과 알림
    runs-on: ubuntu-latest
    needs: [validate, build, deploy-dev, deploy-staging, deploy-prod, rollback]
    if: always()
    
    steps:
      - name: 성공/실패 상태 확인
        id: check-status
        run: |
          if [[ "${{ needs.validate.outputs.environment }}" == "prod" ]]; then
            DEPLOY_JOB_STATUS="${{ needs.deploy-prod.result }}"
          elif [[ "${{ needs.validate.outputs.environment }}" == "staging" ]]; then
            DEPLOY_JOB_STATUS="${{ needs.deploy-staging.result }}"
          elif [[ "${{ needs.validate.outputs.environment }}" == "dev" ]]; then
            DEPLOY_JOB_STATUS="${{ needs.deploy-dev.result }}"
          elif [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            DEPLOY_JOB_STATUS="${{ needs.rollback.result }}"
          else
            DEPLOY_JOB_STATUS="skipped"
          fi
          
          echo "deploy_status=$DEPLOY_JOB_STATUS" >> $GITHUB_OUTPUT
          
          if [[ "$DEPLOY_JOB_STATUS" == "success" ]]; then
            echo "status_emoji=✅" >> $GITHUB_OUTPUT
            echo "status_text=성공" >> $GITHUB_OUTPUT
          elif [[ "$DEPLOY_JOB_STATUS" == "skipped" ]]; then
            echo "status_emoji=⏭️" >> $GITHUB_OUTPUT
            echo "status_text=건너뜀" >> $GITHUB_OUTPUT
          else
            echo "status_emoji=❌" >> $GITHUB_OUTPUT
            echo "status_text=실패" >> $GITHUB_OUTPUT
          fi
      
      - name: Slack 알림 전송
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ steps.check-status.outputs.deploy_status == 'success' && 'good' || steps.check-status.outputs.deploy_status == 'skipped' && 'warning' || 'danger' }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: 배포 결과
          SLACK_MESSAGE: |
            ${{ steps.check-status.outputs.status_emoji }} *배포 ${{ steps.check-status.outputs.status_text }}*
            
            *환경:* ${{ needs.validate.outputs.environment }}
            *버전:* ${{ needs.validate.outputs.version }}
            *타임스탬프:* $(date +"%Y-%m-%d %H:%M:%S")
            *커밋:* ${{ github.sha }}
            *트리거:* ${{ github.event_name }}
            *워크플로우:* ${{ github.workflow }}
            
            [배포 상세 정보](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          SLACK_USERNAME: GitHub Actions
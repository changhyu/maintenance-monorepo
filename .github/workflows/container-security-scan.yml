name: Container Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.github/workflows/container-security-scan.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.github/workflows/container-security-scan.yml'
  schedule:
    # 매주 수요일 오전 2시에 실행
    - cron: '0 2 * * 3'
  workflow_dispatch:

jobs:
  scan-dockerfile:
    name: Scan Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile*
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint

  scan-base-images:
    name: Scan Base Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract base images from Dockerfiles
        id: extract-images
        run: |
          BASE_IMAGES=$(grep -h "^FROM" Dockerfile* | cut -d ' ' -f 2 | sort | uniq | tr '\n' ' ')
          echo "images=${BASE_IMAGES}" >> $GITHUB_OUTPUT

      - name: Trivy scan base images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.extract-images.outputs.images }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          timeout: '10m'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
          category: trivy

  build-and-scan:
    name: Build & Scan Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [
          { path: "Dockerfile.api", tag: "maintenance-api" },
          { path: "Dockerfile.frontend", tag: "maintenance-frontend" },
          { path: "Dockerfile.gateway", tag: "maintenance-gateway" },
          { path: "Dockerfile.ml", tag: "maintenance-ml" },
          { path: "Dockerfile.docs", tag: "maintenance-docs" }
        ]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile.path }}
          tags: ${{ matrix.dockerfile.tag }}:test
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.dockerfile.tag }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.dockerfile.tag }}.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          timeout: '10m'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results-${{ matrix.dockerfile.tag }}.sarif
          category: trivy-${{ matrix.dockerfile.tag }}

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: build-and-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build all-in-one image for SBOM
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.api
          tags: maintenance-sbom:latest
          push: false
          load: true

      - name: Generate SBOM
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'maintenance-sbom:latest'
          format: 'cyclonedx'
          output: 'sbom.cyclonedx.json'

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: software-bill-of-materials
          path: sbom.cyclonedx.json
          retention-days: 90
          
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [scan-dockerfile, scan-base-images, build-and-scan, sbom-generation]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate security summary
        run: |
          echo "# Container Security Scan Summary" > container-security-summary.md
          echo "Date: $(date)" >> container-security-summary.md
          echo "" >> container-security-summary.md
          echo "## Overview" >> container-security-summary.md
          echo "This report contains results of security scanning for the Docker images in this repository." >> container-security-summary.md
          echo "" >> container-security-summary.md
          echo "## SBOM" >> container-security-summary.md
          echo "A Software Bill of Materials (SBOM) has been generated and is available as a workflow artifact." >> container-security-summary.md
          echo "" >> container-security-summary.md
          echo "## Security Recommendations" >> container-security-summary.md
          echo "1. Review any HIGH or CRITICAL vulnerabilities found in the scan results" >> container-security-summary.md
          echo "2. Update base images to latest secure versions" >> container-security-summary.md
          echo "3. Follow best practices for Dockerfile security" >> container-security-summary.md
          echo "4. Regularly scan container images as part of CI/CD" >> container-security-summary.md
      
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: container-security-summary
          path: container-security-summary.md
          retention-days: 30
          
      # Comment on PR if this is a pull request
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: container-security
          path: container-security-summary.md
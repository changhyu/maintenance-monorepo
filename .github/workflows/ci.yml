name: Continuous Integration

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch: # 수동 트리거 허용

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '20'

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # SonarQube를 위한 전체 이력 가져오기

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        if: ${{ env.SONAR_HOST_URL != '' && env.SONAR_TOKEN != '' }}

      - name: Code Security Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, python

      - name: Dependency Security Check
        uses: snyk/actions/node@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          pip install flake8 mypy black
          flake8 backend gitmanager gitservice
          black --check backend gitmanager gitservice
          mypy backend gitmanager gitservice

      - name: Run backend tests
        run: |
          export TESTING=True
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db
          export REDIS_URL=redis://localhost:6379/0
          pytest tests/ backend/tests/ --cov=backend --cov=gitmanager --cov=gitservice --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint and code style check
        run: |
          npm run lint
          npm run format:check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build frontend
        run: npm run build

      - name: Build backend Docker images
        run: |
          docker build -t maintenance-api:${{ github.sha }} -f Dockerfile.api .
          docker build -t maintenance-frontend:${{ github.sha }} -f Dockerfile.frontend .

      - name: Generate Documentation
        run: |
          pip install sphinx sphinx_rtd_theme
          cd docs
          make html

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: packages/frontend/dist/

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

      - name: Save Docker images
        if: github.event_name != 'pull_request'
        run: |
          docker save maintenance-api:${{ github.sha }} > maintenance-api.tar
          docker save maintenance-frontend:${{ github.sha }} > maintenance-frontend.tar

      - name: Upload Docker images
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            maintenance-api.tar
            maintenance-frontend.tar

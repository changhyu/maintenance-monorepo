# 기본 서비스 설정
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    restart: unless-stopped
    env_file: .env
    ports:
      - '8000:8000' # API 서버 포트 외부에 노출
    depends_on:
      - db
      - redis
    volumes:
      - api_logs:/app/logs
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - maintenance-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    ports:
      - '3000:80'
    depends_on:
      - api
    networks:
      - maintenance-network

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env.db
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - maintenance-network

  redis:
    image: redis:alpine
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - maintenance-network

  # 새 서비스 추가
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    restart: unless-stopped
    ports:
      - '4000:4000'
    env_file: .env.gateway
    depends_on:
      - api
      - ml-service
      - document-service
    networks:
      - maintenance-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/status']
      interval: 30s
      timeout: 10s
      retries: 3

  ml-service:
    build:
      context: .
      dockerfile: Dockerfile.ml
    restart: unless-stopped
    ports:
      - '8001:8001'
    env_file: .env.ml
    depends_on:
      - db
      - redis
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
    networks:
      - maintenance-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8001/']
      interval: 30s
      timeout: 10s
      retries: 3

  document-service:
    build:
      context: .
      dockerfile: Dockerfile.docs
    restart: unless-stopped
    ports:
      - '8004:8004'
    env_file: .env.docs
    depends_on:
      - db
      - redis
    volumes:
      - document_storage:/app/storage
      - document_logs:/app/logs
    networks:
      - maintenance-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8004/']
      interval: 30s
      timeout: 10s
      retries: 3

  mobile-api:
    build:
      context: .
      dockerfile: Dockerfile.mobile-api
    restart: unless-stopped
    ports:
      - '8002:8002'
    env_file: .env.mobile
    depends_on:
      - api
      - redis
    volumes:
      - mobile_api_logs:/app/logs
    networks:
      - maintenance-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8002/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # 캐시 모니터링 서비스 추가
  cache-monitor:
    build:
      context: .
      dockerfile: Dockerfile.cache-monitor
    restart: unless-stopped
    ports:
      - '5000:5000'
    environment:
      - REPO_PATH=/app/gitmanager
      - PORT=5000
      - DEBUG=false
    volumes:
      - cache_data:/app/.gitmanager
      - cache_monitor_logs:/app/logs
    networks:
      - maintenance-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5000/']
      interval: 30s
      timeout: 10s
      retries: 3

# 공통 네트워크 설정
networks:
  maintenance-network:
    driver: bridge

# 공통 볼륨 설정
volumes:
  postgres_data:
  api_logs:
  redis_data:
  ml_models:
  ml_logs:
  document_storage:
  document_logs:
  mobile_api_logs:
  cache_data:
  cache_monitor_logs:

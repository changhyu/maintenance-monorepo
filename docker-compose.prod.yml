version: '3.8'

services:
  # API 서비스
  api:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # 프론트엔드 서비스
  frontend:
    restart: always
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # API 게이트웨이
  api-gateway:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # PostgreSQL 데이터베이스
  db:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    environment:
      - POSTGRES_INITDB_ARGS=--data-checksums
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Redis 캐시
  redis:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  # ML 서비스
  ml-service:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # 문서 처리 서비스
  document-service:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # 모바일 API 서비스
  mobile-api:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # 캐시 모니터링 서비스
  cache-monitor:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - DEBUG=false
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # 모니터링 도구
  prometheus:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

  grafana:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
    secrets:
      - grafana_password
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana

  # 로드밸런서 추가
  traefik:
    image: traefik:latest
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik_data:/etc/traefik/acme
    networks:
      - maintenance-network

volumes:
  prometheus_data:
  grafana_data:
  traefik_data:

secrets:
  db_password:
    file: ./docker/secrets/db_password.txt
  grafana_password:
    file: ./docker/secrets/grafana_password.txt
